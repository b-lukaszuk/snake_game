{"version":3,"sources":["components/Button.tsx","config/config.ts","components/canvas/draw/setCanvasDefaults.ts","components/canvas/draw/displayGameOver.ts","components/canvas/draw/drawBlock.ts","types/Direction.ts","components/canvas/Canvas.tsx","utils/eatFood.ts","components/GameStatus.tsx","utils/randInt.ts","utils/isBlockInSnake.ts","utils/getRandBlock.ts","components/Instructions.tsx","utils/shiftSnake.ts","components/SpeedLevelSelector.tsx","utils/willSnakeHitWall.ts","utils/willSnakeEatItself.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","props","displText","onClickAction","onClick","config","setCanvasDefaults","canv","width","height","displayGameOver","ctx","score","fontSize","toFixed","clearRect","font","textAlign","textBaseline","fillStyle","fillText","parseInt","drawBlock","Direction","rowId","colId","blockWidth","blockHeight","color","xStartPx","yStartPx","fillRect","Canvas","canvasRef","useRef","snake","food","isGameOver","nOfRows","nOfCols","snakeColor","foodColor","useEffect","canvas","current","getContext","forEach","b","x","y","ref","className","eatFood","newSnake","slice","unshift","GameStatus","randInt","min","max","result","i","arguments","Error","length","Math","ceil","floor","random","isBlockInSnake","block","getRandBlock","minIncl","maxExcl","getFreeRandBlock","randBlock","Instructions","shiftBlock","direction","Up","Down","Right","SpeedLevelSelector","choices","actionOnSelect","useState","name","markedRadioVal","setMarkedRadioVal","onSelect","choice","delay","map","c","type","value","onChange","checked","htmlFor","id","willSnakeHitWall","noOfRows","newHead","outOfX","outOfY","willSnakeEatItself","App","setDelay","setFood","gameOver","setGameOver","maxSnakeLength","moveDirection","setMoveDirection","setSnake","setScore","handleKeyDown","event","newDirection","key","Left","abs","document","addEventListener","removeEventListener","moveSnake","prevSnake","shiftSnake","onGameOver","clearInterval","timerId","setInterval","willSnakeEatFood","prevScore","chosenDelay","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3e56fe44.chunk.js","sourcesContent":["import { ReactElement } from \"react\";\n\nimport \"./Button.css\";\n\ninterface Props {\n    displText: string;\n    onClick: (event: React.MouseEvent<HTMLElement>) => void;\n}\n\nconst Button: React.FC<Props> = (props): ReactElement<HTMLElement> => {\n    const displText: string = props.displText;\n    const onClickAction: (e: React.MouseEvent<HTMLElement>) => void = props.onClick;\n\n    return (\n        <button onClick={onClickAction}>\n            {displText}\n        </button>\n    )\n}\n\nexport default Button;\n","const config = {\n    // important condition: nOfRows === nOfCols\n    \"nOfRows\": 5,\n    \"nOfCols\": 5,\n    // x, y coordinates work similarly to nrow, ncol in Python's pd.DataFrame indexing\n    \"snake\": [\n        { \"x\": 0, \"y\": 2 },\n        { \"x\": 0, \"y\": 1 },\n        { \"x\": 0, \"y\": 0 },\n    ],\n    \"snakeColor\": \"blue\",\n    \"food\": { \"x\": 3, \"y\": 3 },\n    \"foodColor\": \"red\",\n    \"delay\": 1000,\n}\n\nexport default config;\n","function setCanvasDefaults(canv: HTMLCanvasElement): void {\n    canv.width = 500;\n    canv.height = 500;\n}\n\nexport default setCanvasDefaults;\n","function displayGameOver(ctx: CanvasRenderingContext2D,\n    canv: HTMLCanvasElement, score: number): void {\n\n    let fontSize: string = (canv.height / 8).toFixed(0);\n    ctx.clearRect(0, 0, canv.width, canv.height);\n    ctx.font = `${fontSize}px Arial`;\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n    ctx.fillStyle = \"#ff3333\";\n    ctx.fillText(\"Game Over\", (canv.width / 2),\n        (canv.height / 2) - parseInt(fontSize));\n    ctx.fillText(`Score: ${score}`,\n        (canv.width / 2), (canv.height / 2) + parseInt(fontSize));\n\n}\n\nexport default displayGameOver;\n","// it draws snake by indexing the fields like rows and cols like in\n// Python's pd.DataFrame object\nfunction drawBlock(ctx: CanvasRenderingContext2D,\n    rowId: number, colId: number,\n    blockWidth: number, blockHeight: number,\n    color: string = \"blue\"): void {\n\n    ctx.fillStyle = color;\n    let xStartPx: number = (rowId * blockHeight) + 1; // upper left corner\n    let yStartPx: number = (colId * blockWidth) + 1; // upper left corner\n    ctx.fillRect(yStartPx, xStartPx, blockWidth - 2, blockHeight - 2);\n}\n\nexport default drawBlock;\n","enum Direction {\n    Up = 1,\n    Down = 10,\n    Right = 2,\n    Left = 11,\n}\n\nexport default Direction;\n","import React, { ReactElement, useEffect, useRef } from \"react\";\nimport setCanvasDefaults from \"./draw/setCanvasDefaults\";\nimport displayGameOver from \"./draw/displayGameOver\";\nimport drawBlock from \"./draw/drawBlock\";\nimport Block from \"../..//interfaces/Block\";\nimport config from \"../../config/config\";\n\nimport \"./Canvas.css\";\n\ninterface Props {\n    snake: Block[];\n    food: Block;\n    isGameOver: boolean;\n    score: number;\n}\n\nconst Canvas: React.FC<Props> = (props): ReactElement<HTMLElement> => {\n    const canvasRef = useRef<HTMLCanvasElement | null>(null);\n    const snake: Block[] = props.snake;\n    const food: Block = props.food;\n    const isGameOver: boolean = props.isGameOver;\n    const score: number = props.score;\n    // x, y coordinates work similarly to nrow, ncol in Python's pd.DataFrame indexing\n    const nOfRows: number = config.nOfRows;\n    const nOfCols: number = config.nOfCols;\n    const snakeColor: string = config.snakeColor;\n    const foodColor: string = config.foodColor;\n\n    useEffect(() => {\n        const canvas: HTMLCanvasElement | null = canvasRef.current;\n        if (canvas === null) {\n            return undefined;\n        }\n        const blockWidth: number = canvas.width / nOfCols;\n        const blockHeight: number = canvas.height / nOfRows;\n        setCanvasDefaults(canvas);\n        const ctx: CanvasRenderingContext2D | null = canvas.getContext(\"2d\");\n        if (ctx === null) {\n            return undefined;\n        }\n        snake.forEach((b) =>\n            drawBlock(ctx, b.x, b.y, blockWidth, blockHeight, snakeColor)\n        );\n        drawBlock(ctx, food.x, food.y, blockWidth, blockHeight, foodColor);\n\n        if (isGameOver) {\n            displayGameOver(ctx, canvas, score);\n        }\n    }, [snake, food, nOfRows, nOfCols, foodColor, snakeColor, isGameOver, score]);\n\n    return (\n        <div>\n            <canvas width=\"500\" height=\"500\" ref={canvasRef} className=\"canvas\" />\n        </div>\n    );\n};\n\nexport default Canvas;\n","import Block from '../interfaces/Block';\n\n// returns new snake (after eating food)\nfunction eatFood(snake: Block[], food: Block): Block[] {\n    let newSnake: Block[] = snake.slice();\n    newSnake.unshift(food);\n    return newSnake;\n}\n\nexport default eatFood;\n","import { ReactElement } from \"react\";\n\ninterface Props {\n    isGameOver: boolean;\n    score: number;\n}\n\nconst GameStatus: React.FC<Props> = (props): ReactElement<HTMLElement> => {\n    const isGameOver: boolean = props.isGameOver;\n    const score: number = props.score;\n\n    return (\n        <div>\n            <p>\n                <b>Game status: </b> {isGameOver ? \"Game Over\" : \"In Progress\"}\n            </p>\n            <p>\n                <b>Score: </b> {score}\n            </p>\n        </div>\n    )\n}\n\nexport default GameStatus;\n","/**\n * python like randInt\n * returns random int from given range (incl-excl)\n * @param {number}  min - minimum (incl)\n * @param {number}  max - maximum (excl)\n * @returns {number} random value from a given range\n */\nfunction randInt(min: number, max?: number): number {\n\n    let result: number = 0;\n\n    for (let i = 0; i < 2; i++) {\n        if (arguments[i] < 0) {\n            throw new Error(\"range must not include negative numbers\");\n        }\n    }\n    if (arguments.length === 1) {\n        max = min;\n        min = 0;\n    }\n    // floats protection\n    min = Math.ceil(min);\n    // should always be true,\n    // but the stricter angular checker requires me to do that way\n    if (max) {\n        max = Math.floor(max);\n        result = Math.floor(Math.random() * (max - min)) + min;\n    }\n\n    return result;\n}\n\nexport default randInt;\n","import Block from \"../interfaces/Block\";\n\nfunction isBlockInSnake(block: Block, snake: Block[]): boolean {\n    for (let i = 0; i < snake.length; i++) {\n        if (block.x === snake[i].x && block.y === snake[i].y) {\n            return true;\n        }\n    }\n    return false;\n}\n\nexport default isBlockInSnake;\n","import Block from \"../interfaces/Block\";\nimport randInt from \"./randInt\";\nimport isBlockInSnake from \"./isBlockInSnake\";\n\nfunction getRandBlock(minIncl: number, maxExcl: number): Block {\n    return { x: randInt(minIncl, maxExcl), y: randInt(minIncl, maxExcl) };\n}\n\nfunction getFreeRandBlock(minIncl: number, maxExcl: number, snake: Block[]): Block {\n    let randBlock: Block = getRandBlock(minIncl, maxExcl);\n    while (isBlockInSnake(randBlock, snake)) {\n        randBlock = getRandBlock(minIncl, maxExcl);\n    }\n    return randBlock;\n}\n\nexport default getFreeRandBlock;\n","import { ReactElement } from \"react\";\n\nconst Instructions: React.FC = (): ReactElement<HTMLElement> => {\n    return (\n        <div>\n            <p> <b>Instructions: </b> </p>\n            <span>\n                Click the button to start the game. The snake moves itself.\n                <br />\n                Arrow keys on your keyboard (&#8592; &#8593; &#8594; &#8595;) change the direction of the snake\n                <br />\n                (90 deg. right or left from the direction of the snake's head).\n                <br />\n                Collect food. Avoid collision with the walls and the snake's body.\n                <br />\n            </span>\n        </div>\n    )\n}\n\nexport default Instructions;\n","import Block from '../interfaces/Block';\nimport Direction from '../types/Direction';\n\n// x and y are like row, col in Python's pd.DataFrame\nfunction shiftBlock(block: Block, direction: Direction): Block {\n    if (direction === Direction.Up) {\n        return { x: block.x - 1, y: block.y };\n    } else if (direction === Direction.Down) {\n        return { x: block.x + 1, y: block.y };\n    } else if (direction === Direction.Right) {\n        return { x: block.x, y: block.y + 1 };\n    } else {\n        return { x: block.x, y: block.y - 1 };\n    }\n}\n\nfunction shiftSnake(snake: Block[], direction: Direction): Block[] {\n    let newSnake: Block[] = snake.slice(0, -1);\n    newSnake.unshift(shiftBlock(snake[0], direction))\n    return newSnake;\n}\n\nexport { shiftBlock, shiftSnake };\n","import { ReactElement, useState } from \"react\";\n\nimport IRadioChoice from \"../interfaces/IRadioChoice\";\n\nimport \"./SpeedLevelSelector.css\";\n\ninterface Props {\n    choices: IRadioChoice[];\n    actionOnSelect: (chosenDelay: number) => void;\n}\n\nconst SpeedLevelSelector: React.FC<Props> = (\n    props\n): ReactElement<HTMLElement> => {\n    const choices: IRadioChoice[] = props.choices;\n    const actionOnSelect: (chosenDelay: number) => void = props.actionOnSelect;\n\n    const [markedRadioVal, setMarkedRadioVal]: [string, Function] = useState(\n        choices[0].name\n    );\n\n    const getRadio = (choice: IRadioChoice): ReactElement<HTMLElement> => {\n        return (\n            <span key={choice.id}>\n                <input\n                    type=\"radio\"\n                    value={choice.name}\n                    name=\"speed\"\n                    onChange={() => onSelect(choice)}\n                    checked={markedRadioVal === choice.name}\n                />\n                <label htmlFor={choice.name} onClick={() => onSelect(choice)}>\n                    {choice.name}\n                </label>\n            </span>\n        );\n    };\n\n    const onSelect = (choice: IRadioChoice): void => {\n        setMarkedRadioVal(choice.name);\n        actionOnSelect(choice.delay);\n    };\n\n    return (\n        <fieldset>\n            <legend>Choose speed level</legend>\n            {choices.map((c) => getRadio(c))}\n        </fieldset>\n    );\n};\n\nexport default SpeedLevelSelector;\n","import Block from \"../interfaces/Block\";\nimport Direction from \"../types/Direction\";\nimport { shiftBlock } from \"./shiftSnake\";\n\nfunction willSnakeHitWall(snake: Block[], direction: Direction,\n    noOfRows: number): boolean {\n    let newHead: Block = shiftBlock(snake[0], direction);\n    let outOfX: boolean = newHead.x < 0 || newHead.x >= noOfRows;\n    let outOfY: boolean = newHead.y < 0 || newHead.y >= noOfRows;\n    return outOfX || outOfY;\n}\n\nexport default willSnakeHitWall;\n","import Block from \"../interfaces/Block\";\nimport Direction from \"../types/Direction\";\nimport isBlockInSnake from \"./isBlockInSnake\";\nimport { shiftBlock } from \"./shiftSnake\";\n\nfunction willSnakeEatItself(snake: Block[], direction: Direction): boolean {\n    let newHead: Block = shiftBlock(snake[0], direction);\n    return isBlockInSnake(newHead, snake);\n}\n\nexport default willSnakeEatItself;\n","import React, { useState, useEffect, ReactElement } from \"react\";\n\nimport Block from \"./interfaces/Block\";\nimport Button from \"./components/Button\";\nimport config from \"./config/config\";\nimport Canvas from \"./components/canvas/Canvas\";\nimport Direction from \"./types/Direction\";\nimport eatFood from \"./utils/eatFood\";\nimport GameStatus from \"./components/GameStatus\";\nimport getFreeRandBlock from \"./utils/getRandBlock\";\nimport Instructions from \"./components/Instructions\";\nimport IRadioChoice from \"./interfaces/IRadioChoice\";\nimport { shiftBlock, shiftSnake } from \"./utils/shiftSnake\";\nimport SpeedLevelSelector from \"./components/SpeedLevelSelector\";\nimport willSnakeHitWall from \"./utils/willSnakeHitWall\";\nimport willSnakeEatItself from \"./utils/willSnakeEatItself\";\n\nimport \"./App.css\";\n\nconst App: React.FC = (): ReactElement<HTMLElement> => {\n    const [delay, setDelay]: [number, Function] = useState(config.delay);\n    const delays: IRadioChoice[] = [\n        { id: 0, name: \"Kindergarten\", delay: 1000 },\n        { id: 1, name: \"School\", delay: 800 },\n        { id: 2, name: \"College\", delay: 600 },\n    ];\n    const [food, setFood]: [Block, Function] = useState(config.food);\n    const [gameOver, setGameOver]: [boolean, Function] = useState(true);\n    const maxSnakeLength: number = config.nOfRows * config.nOfCols;\n    const [moveDirection, setMoveDirection]: [Direction, Function] = useState(\n        Direction.Right\n    );\n    const [snake, setSnake]: [Block[], Function] = useState(config.snake);\n    const [score, setScore]: [number, Function] = useState(snake.length);\n\n    const startClickHandler = (): void => {\n        setScore(snake.length);\n        setGameOver(false);\n    };\n\n    const radioSelectHandler = (chosenDelay: number): void => {\n        setDelay(chosenDelay);\n    };\n\n    useEffect(() => {\n        const handleKeyDown = (event: KeyboardEvent) => {\n            let newDirection: Direction = moveDirection;\n            if (event.key === \"ArrowLeft\") {\n                newDirection = Direction.Left;\n            }\n            if (event.key === \"ArrowUp\") {\n                newDirection = Direction.Up;\n            }\n            if (event.key === \"ArrowRight\") {\n                newDirection = Direction.Right;\n            }\n            if (event.key === \"ArrowDown\") {\n                newDirection = Direction.Down;\n            }\n            if (\n                newDirection !== moveDirection &&\n                Math.abs(newDirection - moveDirection) !== 9\n            ) {\n                setMoveDirection(newDirection);\n            }\n        };\n        document.addEventListener(\"keydown\", handleKeyDown);\n        return () => {\n            document.removeEventListener(\"keydown\", handleKeyDown);\n        };\n    }, [moveDirection]);\n\n    useEffect(() => {\n        const initializeGame = (): void => {\n            setSnake(config.snake);\n            setFood(config.food);\n            setMoveDirection(Direction.Right);\n        };\n        const moveSnake = (): void => {\n            setSnake((prevSnake: Block[]) => {\n                return shiftSnake(prevSnake, moveDirection);\n            });\n        };\n        const willSnakeEatFood = (): boolean => {\n            let newHead: Block = shiftBlock(snake[0], moveDirection);\n            return newHead.x === food.x && newHead.y === food.y;\n        };\n        const growSnake = (): void => {\n            setSnake((prevSnake: Block[]) => {\n                return eatFood(prevSnake, food);\n            });\n        };\n        const setNewFood = (newSnake: Block[]): void => {\n            setFood(getFreeRandBlock(0, config.nOfRows, newSnake));\n        };\n\n        const isGameOver = (): boolean => {\n            return (\n                willSnakeHitWall(snake, moveDirection, config.nOfRows) ||\n                willSnakeEatItself(snake, moveDirection)\n            );\n        };\n\n        const onGameOver = (): void => {\n            clearInterval(timerId);\n            initializeGame();\n        };\n\n        let timerId = setInterval(() => {\n            if (gameOver) {\n                onGameOver();\n            } else {\n                if (willSnakeEatFood()) {\n                    // otherwise while loop in getFreeRandBlock (in setNewFood)\n                    // is infinite\n                    if (snake.length === maxSnakeLength - 1) {\n                        setScore((prevScore: number) => prevScore + 1);\n                        setGameOver(true);\n                    } else {\n                        // necessary,\n                        // rendering is lagging about 1 frame behind code\n                        // otherwise, new food may come in head\n                        setScore((prevScore: number) => prevScore + 1);\n                        setNewFood(eatFood(snake, food));\n                        growSnake();\n                    }\n                } else {\n                    moveSnake();\n                }\n            }\n            if (isGameOver()) {\n                setGameOver(true);\n            }\n        }, delay);\n        return () => {\n            clearInterval(timerId);\n        };\n    }, [delay, food, gameOver, maxSnakeLength, moveDirection, score, snake]);\n\n    return (\n        <div className=\"App\">\n            <Instructions />\n            <GameStatus isGameOver={gameOver} score={score} />\n            <Canvas snake={snake} food={food} isGameOver={gameOver} score={score} />\n            {gameOver && (\n                <Button onClick={startClickHandler} displText={\"start game\"} />\n            )}\n            {gameOver && (\n                <SpeedLevelSelector\n                    choices={delays}\n                    actionOnSelect={radioSelectHandler}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}